syntax = "proto2";
package hw.trezor.messages.kickasscoin;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageKickAssCoin";

/**
 * Structure representing KickAssCoin transaction source entry, UTXO
 * @embed
 */
message KickAssCoinTransactionSourceEntry {
    repeated KickAssCoinOutputEntry outputs = 1;  // all outputs including decoys (forms the ring)
    optional uint64 real_output = 2;  // index denoting which item in `outputs` is our real output (not a decoy)
    optional bytes real_out_tx_key = 3;  // tx key located in the real output's tx
    repeated bytes real_out_additional_tx_keys = 4;  // additional tx keys if applicable
    optional uint64 real_output_in_tx_index = 5;  // index of our real output in the tx (aka which output was it in the transaction)
    optional uint64 amount = 6;
    optional bool rct = 7;  // is RingCT used (true for newer UTXOs)
    optional bytes mask = 8;
    optional KickAssCoinMultisigKLRki multisig_kLRki = 9;
    message KickAssCoinOutputEntry {
        optional uint64 idx = 1;
        optional KickAssCoinRctKeyPublic key = 2;
        message KickAssCoinRctKeyPublic {
            optional bytes dest = 1;
            optional bytes commitment = 2;
        }
    }
    message KickAssCoinMultisigKLRki {
        optional bytes K = 1;
        optional bytes L = 2;
        optional bytes R = 3;
        optional bytes ki = 4;
    }
}

/**
 * Structure representing KickAssCoin transaction destination entry
 * @embed
 */
message KickAssCoinTransactionDestinationEntry {
    optional uint64 amount = 1;
    optional KickAssCoinAccountPublicAddress addr = 2;
    optional bool is_subaddress = 3;
    optional bytes original = 4;
    optional bool is_integrated = 5;
    /**
     * Structure representing KickAssCoin public address
     */
    message KickAssCoinAccountPublicAddress {
        optional bytes spend_public_key = 1;
        optional bytes view_public_key = 2;
    }
}

/**
 * Range sig parameters / data.
 * @embed
 */
message KickAssCoinTransactionRsigData {
    optional uint32 rsig_type = 1;  // range signature (aka proof) type
    optional uint32 offload_type = 2;
    repeated uint64 grouping = 3;  // aggregation scheme for BP

    optional bytes mask = 4;       // mask vector
    optional bytes rsig = 5;       // range sig data, all of it or partial (based on rsig_parts)
    repeated bytes rsig_parts = 6;
    optional uint32 bp_version = 7;  // Bulletproof version
}

/**
 * Request: Ask device for public address derived from seed and address_n
 * @start
 * @next KickAssCoinAddress
 * @next Failure
 */
message KickAssCoinGetAddress {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bool show_display = 2;         // Optionally show on display before sending the result
    optional uint32 network_type = 3;       // Main-net / testnet / stagenet
    optional uint32 account = 4;            // Major subaddr index
    optional uint32 minor = 5;              // Minor subaddr index
}

/**
 * Response: Contains KickAssCoin watch-only credentials derived from device private seed
 * @end
 */
message KickAssCoinAddress {
    optional bytes address = 1;
}

/**
 * Request: Ask device for watch only credentials
 * @start
 * @next KickAssCoinWatchKey
 * @next Failure
 */
message KickAssCoinGetWatchKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional uint32 network_type = 2;       // Main-net / testnet / stagenet
}

/**
 * Response: Contains KickAssCoin watch-only credentials derived from device private seed
 * @end
 */
message KickAssCoinWatchKey {
    optional bytes watch_key = 1;
    optional bytes address = 2;
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Initializes transaction signing.
 * @start
 * @next KickAssCoinTransactionInitAck
 */
message KickAssCoinTransactionInitRequest {
    optional uint32 version = 1;
    repeated uint32 address_n = 2;
    optional uint32 network_type = 3;       // Main-net / testnet / stagenet
    optional KickAssCoinTransactionData tsx_data = 4;
    /**
     * Structure representing KickAssCoin initial transaction information
     */
    message KickAssCoinTransactionData {
        optional uint32 version = 1;
        optional bytes payment_id = 2;
        optional uint64 unlock_time = 3;
        repeated KickAssCoinTransactionDestinationEntry outputs = 4;
        optional KickAssCoinTransactionDestinationEntry change_dts = 5;
        optional uint32 num_inputs = 6;
        optional uint32 mixin = 7;
        optional uint64 fee = 8;
        optional uint32 account = 9;
        repeated uint32 minor_indices = 10;
        optional KickAssCoinTransactionRsigData rsig_data = 11;
        repeated uint32 integrated_indices = 12;
        optional uint32 client_version = 13;  // connected client version
    }
}

/**
 * Response: Response to transaction signing initialization.
 * @next KickAssCoinTransactionSetInputRequest
 */
message KickAssCoinTransactionInitAck {
    repeated bytes hmacs = 1;
    optional KickAssCoinTransactionRsigData rsig_data = 2;
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Sends one UTXO to device
 * @next KickAssCoinTransactionSetInputAck
 */
message KickAssCoinTransactionSetInputRequest {
    optional KickAssCoinTransactionSourceEntry src_entr = 1;
}

/**
 * Response: Response to setting UTXO for signature. Contains sealed values needed for further protocol steps.
 * @next KickAssCoinTransactionSetInputAck
 * @next KickAssCoinTransactionInputsPermutationRequest
 */
message KickAssCoinTransactionSetInputAck {
    optional bytes vini = 1;      // xmrtypes.TxinToKey
    optional bytes vini_hmac = 2;
    optional bytes pseudo_out = 3;
    optional bytes pseudo_out_hmac = 4;
    optional bytes pseudo_out_alpha = 5;
    optional bytes spend_key = 6;
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Permutation on key images.
 * @next KickAssCoinTransactionInputsPermutationAck
 */
message KickAssCoinTransactionInputsPermutationRequest {
    repeated uint32 perm = 1;
}

/**
 * Response: Response to setting permutation on key images
 * @next KickAssCoinTransactionInputViniRequest
 */
message KickAssCoinTransactionInputsPermutationAck {
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Sends one UTXO to device together with sealed values.
 * @next KickAssCoinTransactionInputViniAck
 */
message KickAssCoinTransactionInputViniRequest {
    optional KickAssCoinTransactionSourceEntry src_entr = 1; 
    optional bytes vini = 2;      // xmrtypes.TxinToKey
    optional bytes vini_hmac = 3;
    optional bytes pseudo_out = 4;
    optional bytes pseudo_out_hmac = 5;
}

/**
 * Response: Response to setting UTXO to the device
 * @next KickAssCoinTransactionInputViniRequest
 * @next KickAssCoinTransactionAllInputsSetRequest
 */
message KickAssCoinTransactionInputViniAck {
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Sent after all inputs have been sent. Useful for rangeisg offloading.
 * @next KickAssCoinTransactionAllInputsSetAck
 */
message KickAssCoinTransactionAllInputsSetRequest {
}

/**
 * Response: Response to after all inputs have been set.
 * @next KickAssCoinTransactionSetOutputRequest
 */
message KickAssCoinTransactionAllInputsSetAck {
    optional KickAssCoinTransactionRsigData rsig_data = 1;
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Sends one transaction destination to device (HMACed)
 * @next KickAssCoinTransactionSetOutputAck
 */
message KickAssCoinTransactionSetOutputRequest {
    optional KickAssCoinTransactionDestinationEntry dst_entr = 1;
    optional bytes dst_entr_hmac = 2;
    optional KickAssCoinTransactionRsigData rsig_data = 3;
    optional bool is_offloaded_bp = 4;  // Extra message, with offloaded BP.
}

/**
 * Response: Response to setting transaction destination. Contains sealed values needed for further protocol steps.
 * @next KickAssCoinTransactionSetOutputRequest
 * @next KickAssCoinTransactionAllOutSetRequest
 */
message KickAssCoinTransactionSetOutputAck {
    optional bytes tx_out = 1;  // xmrtypes.TxOut
    optional bytes vouti_hmac = 2;
    optional KickAssCoinTransactionRsigData rsig_data = 3;
    optional bytes out_pk = 4;
    optional bytes ecdh_info = 5;
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Sent after all outputs are sent.
 * @next KickAssCoinTransactionAllOutSetAck
 */
message KickAssCoinTransactionAllOutSetRequest {
    optional KickAssCoinTransactionRsigData rsig_data = 1;
}

/**
 * Response: After all outputs are sent the initial RCT signature fields are sent.
 * @next KickAssCoinTransactionSignInputRequest
 */
message KickAssCoinTransactionAllOutSetAck {
    optional bytes extra = 1;
    optional bytes tx_prefix_hash = 2;
    optional KickAssCoinRingCtSig rv = 4;  // xmrtypes.RctSig
    optional bytes full_message_hash = 5;

    /*
     * Structure represents initial fields of the KickAssCoin RCT signature
     */
    message KickAssCoinRingCtSig {
        optional uint64 txn_fee = 1;
        optional bytes message = 2;
        optional uint32 rv_type = 3;
    }
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Sends UTXO for the signing.
 * @next KickAssCoinTransactionSignInputAck
 */
message KickAssCoinTransactionSignInputRequest {
    optional KickAssCoinTransactionSourceEntry src_entr = 1;
    optional bytes vini = 2;     // xmrtypes.TxinToKey
    optional bytes vini_hmac = 3;
    optional bytes pseudo_out = 4;
    optional bytes pseudo_out_hmac = 5;
    optional bytes pseudo_out_alpha = 6;
    optional bytes spend_key = 7;
}

/**
 * Response: Contains full MG signature of the UTXO + multisig data if applicable.
 * @next KickAssCoinTransactionSignInputRequest
 * @next KickAssCoinTransactionFinalRequest
 */
message KickAssCoinTransactionSignInputAck {
    optional bytes signature = 1;
    optional bytes pseudo_out = 2;  // updated pseudo-out after mask correction
}

/**
 * Request: Sub request of KickAssCoinTransactionSign. Final message of the procol after all UTXOs are signed
 * @next KickAssCoinTransactionFinalAck
 */
message KickAssCoinTransactionFinalRequest {
}

/**
 * Response: Contains transaction metadata and encryption keys needed for further transaction operations (e.g. multisig, send proof).
 * @end
 */
message KickAssCoinTransactionFinalAck {
    optional bytes cout_key = 1;
    optional bytes salt = 2;
    optional bytes rand_mult = 3;
    optional bytes tx_enc_keys = 4;
}

/**
 * Request: Sub request of KickAssCoinKeyImageSync. Initializing key image sync.
 * @start
 * @next KickAssCoinKeyImageExportInitAck
 */
message KickAssCoinKeyImageExportInitRequest {
    optional uint64 num = 1;
    optional bytes hash = 2;
    repeated uint32 address_n = 3;               // BIP-32 path to derive the key from master node
    optional uint32 network_type = 4;            // Main-net / testnet / stagenet
    repeated KickAssCoinSubAddressIndicesList subs = 5;
    /**
     * Structure representing KickAssCoin list of sub-addresses
     */
    message KickAssCoinSubAddressIndicesList {
        optional uint32 account = 1;
        repeated uint32 minor_indices = 2;
    }
}

/**
 * Response: Response to key image sync initialization.
 * @next KickAssCoinKeyImageSyncStepRequest
 */
message KickAssCoinKeyImageExportInitAck {
}

/**
 * Request: Sub request of KickAssCoinKeyImageSync. Contains batch of the UTXO to export key image for.
 * @next KickAssCoinKeyImageSyncStepAck
 */
message KickAssCoinKeyImageSyncStepRequest {
    repeated KickAssCoinTransferDetails tdis = 1;
    /**
     * Structure representing KickAssCoin UTXO for key image sync
     */
    message KickAssCoinTransferDetails {
        optional bytes out_key = 1;
        optional bytes tx_pub_key = 2;
        repeated bytes additional_tx_pub_keys = 3;
        optional uint64 internal_output_index = 4;
    }
}

/**
 * Response: Response to key image sync step. Contains encrypted exported key image.
 * @next KickAssCoinKeyImageSyncStepRequest
 * @next KickAssCoinKeyImageSyncFinalRequest
 */
message KickAssCoinKeyImageSyncStepAck {
    repeated KickAssCoinExportedKeyImage kis = 1;
    /**
     * Structure representing KickAssCoin encrypted exported key image
     */
    message KickAssCoinExportedKeyImage {
        optional bytes iv = 1;
        optional bytes blob = 3;
    }
}

/**
 * Request: Sub request of KickAssCoinKeyImageSync. Final message of the sync protocol.
 * @next KickAssCoinKeyImageSyncFinalAck
 */
message KickAssCoinKeyImageSyncFinalRequest {
}

/**
 * Response: Response to key image sync step. Contains encryption keys for exported key images.
 * @end
 */
message KickAssCoinKeyImageSyncFinalAck {
    optional bytes enc_key = 1;
}

/**
 * Request: Decrypt tx private keys blob
 * @next KickAssCoinGetTxKeyAck
 */
message KickAssCoinGetTxKeyRequest {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional uint32 network_type = 2;       // Main-net / testnet / stagenet

    optional bytes salt1 = 3;
    optional bytes salt2 = 4;
    optional bytes tx_enc_keys = 5;
    optional bytes tx_prefix_hash = 6;
    optional uint32 reason = 7;  // reason to display for user. e.g., tx_proof
    optional bytes view_public_key = 8;   // addr for derivation
}

/**
 * Response: Response with the re-encrypted private keys and derivations blob under view key
 * @end
 */
message KickAssCoinGetTxKeyAck {
    optional bytes salt = 1;
    optional bytes tx_keys = 2;
    optional bytes tx_derivations = 3;
}

/**
 * Request: Starts live refresh flow. Asks user permission, switches state
 * @next KickAssCoinLiveRefreshStartAck
 */
message KickAssCoinLiveRefreshStartRequest {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional uint32 network_type = 2;       // Main-net / testnet / stagenet
}

/**
 * Response after user gave permission
 * @next KickAssCoinLiveRefreshStepRequest
 * @next KickAssCoinLiveRefreshFinalRequest
 */
message KickAssCoinLiveRefreshStartAck {

}

/**
 * Request: Request to compute a single key image during live sync
 * @next KickAssCoinLiveRefreshStepAck
 */
message KickAssCoinLiveRefreshStepRequest {
    optional bytes out_key = 1;
    optional bytes recv_deriv = 2;
    optional uint64 real_out_idx = 3;
    optional uint32 sub_addr_major = 4;
    optional uint32 sub_addr_minor = 5;
}

/**
 * Response: Response with the encrypted key image + signature
 * @next KickAssCoinLiveRefreshStepRequest
 * @next KickAssCoinLiveRefreshFinishedRequest
 */
message KickAssCoinLiveRefreshStepAck {
    optional bytes salt = 1;
    optional bytes key_image = 2;
}

/**
 * Request: Request terminating live refresh mode.
 * @next KickAssCoinLiveRefreshFinishedAck
 */
message KickAssCoinLiveRefreshFinalRequest {

}

/**
 * Response: Response on termination of live refresh mode.
 * @end
 */
message KickAssCoinLiveRefreshFinalAck {

}

/**
 * Request: Universal KickAssCoin protocol implementation diagnosis request.
 * @start
 * @next DebugKickAssCoinDiagAck
 */
message DebugKickAssCoinDiagRequest {
    optional uint64 ins = 1;
    optional uint64 p1 = 2;
    optional uint64 p2 = 3;
    repeated uint64 pd = 4;
    optional bytes data1 = 5;
    optional bytes data2 = 6;
}

/**
 * Response: Response to KickAssCoin diagnosis protocol.
 * @end
 */
message DebugKickAssCoinDiagAck {
    optional uint64 ins = 1;
    optional uint64 p1 = 2;
    optional uint64 p2 = 3;
    repeated uint64 pd = 4;
    optional bytes data1 = 5;
    optional bytes data2 = 6;
}
